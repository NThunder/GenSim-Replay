import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsOnCylinder(Task):
    """Stack three different colored balls (red, green, and blue) on top of a vertically placed cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "stack the {color} ball on the cylinder"
        self.task_completed_desc = "done stacking balls on cylinder."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Cylinder: Gray, radius=0.03, height=0.1
        cylinder_size = (0.03, 0.1) # radius, height
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0], cylinder_size[1] / 2)}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        env.add_object(cylinder_urdf, cylinder_pose, 'fixed')

        # Balls: red, green, blue, radius=0.02
        ball_size = (0.02,) # radius
        ball_template = 'ball/ball-template.urdf'
        colors = [utils.COLORS['red'], utils.COLORS['green'], utils.COLORS['blue']]
        color_names = ['red', 'green', 'blue']
        ball_ids = []

        # Placement positions for the balls on the cylinder.
        place_pos = [(0, 0, 0.02 + cylinder_size[1]), 
                     (0, 0, 0.04 + cylinder_size[1]),
                     (0, 0, 0.06 + cylinder_size[1])]
        targs = [(utils.apply(cylinder_pose, i), cylinder_pose[1]) for i in place_pos]


        for i in range(3):
            replace = {'DIM': ball_size, 'HALF': (ball_size[0],)}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_pose = self.get_random_pose(env, ball_size)
            ball_id = env.add_object(ball_urdf, ball_pose, color=colors[i])
            ball_ids.append(ball_id)

            # Goal: stack each ball on the cylinder in the specified order.
            language_goal = self.lang_template.format(color=color_names[i])
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[targs[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, 
                          language_goal=language_goal) # 1/3 because there are 3 goals