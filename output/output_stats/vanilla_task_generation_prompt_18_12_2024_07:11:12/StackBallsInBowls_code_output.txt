import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsInBowls(Task):
    """Pick up three different colored balls (red, green, and blue) and stack them inside a correspondingly colored bowl (red, green, and blue)."""

    def __init__(self):
        super().__init__()
        self.max_steps = 15 # Set maximum steps
        self.lang_template = "place the {color} ball in the {color} bowl"
        self.task_completed_desc = "done stacking balls in bowls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define colors and corresponding language descriptions
        colors = ['red', 'green', 'blue']

        # Bowl properties:
        # Category: fixed (cannot be moved by the robot)
        # Size: (0.12, 0.12, 0) - slightly larger than the balls
        bowl_size = (0.12, 0.12, 0)
        bowl_urdf = 'bowl/bowl.urdf'

        # Ball properties:
        # Category: object (can be manipulated)
        # Size: (0.04, 0.04, 0.04)
        ball_size = (0.04, 0.04, 0.04)
        ball_urdf = 'ball/ball-template.urdf'

        # Initialize lists to store object IDs and target poses
        balls = []
        bowl_poses = []

        # Add bowls and balls to the environment
        for color in colors:
            # Get a random pose for the bowl
            bowl_pose = self.get_random_pose(env, bowl_size)
            # Add the bowl with the specified color
            env.add_object(bowl_urdf, bowl_pose, color=utils.COLORS[color], category='fixed')
            bowl_poses.append(bowl_pose)

            # Get a random pose for the ball
            ball_pose = self.get_random_pose(env, ball_size)
            # Add the ball with the specified color
            ball_id = env.add_object(ball_urdf, ball_pose, color=utils.COLORS[color])
            balls.append(ball_id)

        # Define goal matches - each ball corresponds to a specific bowl (same color)
        matches = np.eye(3)

        # Add goals for each ball-bowl pair
        for i in range(3):
            language_goal = self.lang_template.format(color=colors[i]) # Format language goal
            self.add_goal(objs=[balls[i]], matches=matches[i:i+1], targ_poses=[bowl_poses[i]], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, # step_max_reward is 1/3 since there are 3 goals
                          language_goal=language_goal) # Add language goal