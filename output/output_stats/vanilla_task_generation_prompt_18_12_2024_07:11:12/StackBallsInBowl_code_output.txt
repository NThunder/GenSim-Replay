import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsInBowl(Task):
    """Stack three different colored balls (red, green, blue) on top of each other inside a white bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set maximum steps
        self.lang_template = "Stack the red, green, and blue balls in the white bowl."
        self.task_completed_desc = "Done stacking balls in bowl."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Bowl
        # Color: White
        # Size: Default bowl size
        # Category: Fixed (cannot be moved)
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_size = (0.12, 0.12, 0.0)  # Use default bowl size
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS['white'])

        # Balls
        # Colors: Red, Green, Blue
        # Size: Small (adjust as needed)
        # Category: Object (can be moved)
        ball_colors = ['red', 'green', 'blue']
        ball_size = (0.04, 0.04, 0.04)
        ball_urdf = 'ball/ball-template.urdf'
        ball_ids = []
        ball_poses = []

        for color in ball_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            ball_id = env.add_object(ball_urdf, ball_pose, color=utils.COLORS[color])
            ball_ids.append(ball_id)
            ball_poses.append(ball_pose)

        # Goal: Stack balls in the bowl
        # Target positions are slightly offset vertically to encourage stacking
        target_poses = []
        z_offset = 0.04  # Adjust vertical offset as needed
        for i in range(len(ball_colors)):
            target_pose = (bowl_pose[0], bowl_pose[1], bowl_pose[2][2] + (i+1) * z_offset) # Calculate target pose inside the bowl
            target_poses.append((target_pose, bowl_pose[1])) # Append target pose and bowl orientation

        # Define matches matrix: each ball needs to be in a specific position within the bowl
        matches = np.eye(len(ball_colors))

        self.add_goal(objs=ball_ids, matches=matches, targ_poses=target_poses, replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1,
                      language_goal=self.lang_template) # step_max_reward is 1 since there is only one goal