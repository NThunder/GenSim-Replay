import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsOnCylinder(Task):
    """Stack three different colored balls (red, green, and blue) on top of a large upright cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "stack the {color} ball on the cylinder"
        self.task_completed_desc = "done stacking balls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Cylinder: Large, upright, gray. Category: fixed.
        cylinder_size = (0.1, 0.1, 0.2)  # Radius 0.1, height 0.2
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_template = 'cylinder/cylinder-template.urdf'
        replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0], cylinder_size[1], cylinder_size[2] / 2)}
        cylinder_urdf = self.fill_template(cylinder_template, replace)
        env.add_object(cylinder_urdf, cylinder_pose, 'fixed')

        # Balls: Small, red, green, blue. Category: object.
        ball_size = (0.04, 0.04, 0.04)  # Radius 0.04
        ball_template = 'ball/ball-template.urdf'
        ball_colors = ['red', 'green', 'blue']
        ball_ids = []

        ball_poses = []
        for color in ball_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            replace = {'DIM': ball_size, 'HALF': (ball_size[0], ball_size[1], ball_size[2] / 2)}
            ball_urdf = self.fill_template(ball_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose, color=utils.COLORS[color])
            ball_ids.append(ball_id)

            # Calculate target poses on top of the cylinder.
            ball_target_pose = (cylinder_pose[0], 
                               cylinder_pose[1] + np.array([0, 0, cylinder_size[2] / 2.0 + ball_size[2] / 2.0 + (ball_colors.index(color) * ball_size[2])]),
                               cylinder_pose[2])
            ball_poses.append(ball_target_pose)



        # Goals: Stack each ball on the cylinder in the order red, green, blue.
        for i, ball_id in enumerate(ball_ids):
            language_goal = self.lang_template.format(color=ball_colors[i])
            self.add_goal(objs=[ball_id], matches=np.ones((1, 1)), targ_poses=[ball_poses[i]], replace=False, 
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal) # step_max_reward is 1/3 because we have 3 goals.