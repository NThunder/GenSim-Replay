import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderSorting(Task):
    """Pick up cylinders of predetermined colors and stack them in a corner, separating them by color into three distinct stacks."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "stack all {color} cylinders in the corner"
        self.task_completed_desc = "done sorting cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders for each color.
        n_cylinders_per_color = 3
        total_cylinders = n_cylinders_per_color * 3

        # Define cylinder size.
        cylinder_size = (0.04, 0.04, 0.12)  # (radius, radius, height)

        # Define colors for the cylinders.
        colors = ['red', 'green', 'blue']
        color_names = [f"{color} cylinder" for color in colors]

        # Add corner marker.
        corner_size = (0.05, 0.05, 0.01)  # Size of the corner marker
        corner_pose = self.get_random_pose(env, corner_size)
        corner_urdf = 'corner/corner-template.urdf'
        env.add_object(corner_urdf, corner_pose, 'fixed')

        # Add cylinders.
        cylinder_template = 'cylinder/cylinder-template.urdf'
        cylinder_poses = []
        for color in colors:
            for _ in range(n_cylinders_per_color):
                pose = self.get_random_pose(env, cylinder_size)
                replace = {'COLOR': utils.COLORS[color]}
                urdf = self.fill_template(cylinder_template, replace)
                cylinder_id = env.add_object(urdf, pose)
                cylinder_poses.append((cylinder_id, pose, color))

        # Add goals for each color.
        for color, color_name in zip(colors, color_names):
            # Filter cylinders by color.
            color_cylinders = [cid for cid, _, c in cylinder_poses if c == color]
            # Define the target poses for the cylinders in the corner.
            target_poses = [self.get_offset_pose(corner_pose, (i * 0.05, 0, (j + 1) * cylinder_size[2]))
                            for i in range(n_cylinders_per_color) for j in range(n_cylinders_per_color)]
            # Add goal for the current color.
            self.add_goal(objs=color_cylinders, matches=np.ones((n_cylinders_per_color, 1)), targ_poses=target_poses[:n_cylinders_per_color],
                          replace=False, rotations=True, metric='pose', params=None, step_max_reward=1/3,
                          language_goal=self.lang_template.format(color=color_name))

    def get_offset_pose(self, base_pose, offset):
        """Get a new pose offset from a base pose."""
        base_pos, base_orn = base_pose
        offset_pos = np.array(base_pos) + np.array(offset)
        return (offset_pos, base_orn)