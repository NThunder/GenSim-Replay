import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsInBowls(Task):
    """Stack three different colored balls (red, green, and blue) inside three correspondingly colored bowls (red, green, and blue)."""

    def __init__(self):
        super().__init__()
        self.max_steps = 6
        self.lang_template = "place the {color} ball in the {color} bowl"
        self.task_completed_desc = "done stacking balls in bowls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define colors and corresponding language descriptions
        colors = ['red', 'green', 'blue']

        # Bowl size and urdf
        bowl_size = (0.12, 0.12, 0.02)  # Slightly larger height for stacking
        bowl_urdf = 'bowl/bowl.urdf'

        # Ball size and urdf template
        ball_size = (0.04, 0.04, 0.04)
        ball_urdf_template = 'ball/ball-template.urdf'

        # Initialize lists to store object IDs and target poses
        balls = []
        bowls = []
        targ_poses = []

        # Add bowls and balls with matching colors
        for color in colors:
            # Bowl pose
            bowl_pose = self.get_random_pose(env, bowl_size)
            bowl_id = env.add_object(bowl_urdf, bowl_pose, color=utils.COLORS[color])
            bowls.append(bowl_id)
            
            # Calculate target pose for the ball inside the bowl
            targ_pose = (bowl_pose[0], bowl_pose[1], bowl_pose[2] + 0.06) # Adjust height for stacking
            targ_poses.append(targ_pose)

            # Ball pose
            ball_pose = self.get_random_pose(env, ball_size)
            
            # Use template to create colored ball urdf
            replace = {'COLOR': utils.COLORS[color]}
            ball_urdf = self.fill_template(ball_urdf_template, replace)
            ball_id = env.add_object(ball_urdf, ball_pose)
            balls.append(ball_id)

        # Add goals for each ball-bowl pair
        for i in range(len(colors)):
            language_goal = self.lang_template.format(color=colors[i])
            self.add_goal(objs=[balls[i]], matches=np.ones((1, 1)), targ_poses=[targ_poses[i]], 
                          replace=False, rotations=True, metric='pose', params=None,
                          step_max_reward=1/len(colors), language_goal=language_goal) # step_max_reward is 1/3 since there are 3 goals