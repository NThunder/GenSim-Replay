import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsOnCylinder(Task):
    """Stack three different colored balls (red, green, blue) on top of a vertically placed cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "stack the {color} ball on the cylinder"
        self.task_completed_desc = "done stacking balls on cylinder."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Cylinder: gray, size (0.05, 0.05, 0.1), fixed
        cylinder_size = (0.05, 0.05, 0.1)
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        env.add_object(cylinder_urdf, cylinder_pose, 'fixed')

        # Balls: red, green, blue, size (0.04, 0.04, 0.04)
        ball_size = (0.04, 0.04, 0.04)
        ball_urdf = 'ball/ball-template.urdf'
        colors = [utils.COLORS['red'], utils.COLORS['green'], utils.COLORS['blue']]
        ball_ids = []

        ball_poses = []
        for i in range(3):
            ball_pose = self.get_random_pose(env, ball_size)
            ball_id = env.add_object(ball_urdf, ball_pose, color=colors[i])
            ball_ids.append(ball_id)
            ball_poses.append(ball_pose)


        # Target poses for the balls on the cylinder.
        target_z = cylinder_pose[0][2] + cylinder_size[2] / 2  # Top of the cylinder
        target_poses = [
            (cylinder_pose[0][:2] + (target_z + 0.04,), cylinder_pose[1]), # red ball
            (cylinder_pose[0][:2] + (target_z + 2 * 0.04,), cylinder_pose[1]), # green ball
            (cylinder_pose[0][:2] + (target_z + 3 * 0.04,), cylinder_pose[1]), # blue ball
        ]

        # Goal: stack the red ball on the cylinder.
        language_goal = self.lang_template.format(color="red")
        self.add_goal(objs=[ball_ids[0]], matches=np.ones((1, 1)), targ_poses=[target_poses[0]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Goal: stack the green ball on the red ball.
        language_goal = self.lang_template.format(color="green")
        self.add_goal(objs=[ball_ids[1]], matches=np.ones((1, 1)), targ_poses=[target_poses[1]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Goal: stack the blue ball on the green ball.
        language_goal = self.lang_template.format(color="blue")
        self.add_goal(objs=[ball_ids[2]], matches=np.ones((1, 1)), targ_poses=[target_poses[2]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)