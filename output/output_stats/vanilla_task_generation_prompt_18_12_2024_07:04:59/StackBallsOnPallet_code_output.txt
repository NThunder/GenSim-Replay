import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsOnPallet(Task):
    """Stack three balls (red, green, blue) on a pallet (red at bottom, green middle, blue top)."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set maximum steps
        self.lang_template = "Stack the {color} ball on the {target}"
        self.task_completed_desc = "Done stacking balls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Pallet (brown, large, fixed)
        pallet_size = (0.15, 0.15, 0.02)  # Dimensions of the pallet
        pallet_pose = self.get_random_pose(env, pallet_size)  # Random pose on the tabletop
        pallet_urdf = 'pallet/pallet.urdf'
        env.add_object(pallet_urdf, pallet_pose, 'fixed')  # Add pallet to the environment

        # Balls (red, green, blue, small)
        ball_size = (0.04, 0.04, 0.04)  # Dimensions of the balls
        ball_urdf = 'ball/ball-template.urdf'
        colors = ['red', 'green', 'blue']
        ball_ids = []

        for color in colors:
            ball_pose = self.get_random_pose(env, ball_size)  # Random pose on the tabletop
            ball_id = env.add_object(ball_urdf, ball_pose, color=utils.COLORS[color])  # Add ball with specified color
            ball_ids.append(ball_id)

        # Goal: Stack balls in order on the pallet.
        targets = ['pallet', 'red ball', 'green ball']
        target_poses = [pallet_pose]  # Initial target is the pallet

        for i in range(3):
            # Calculate target pose for each ball (stacking on top of previous object)
            target_pose = (pallet_pose[0], pallet_pose[1], pallet_pose[2] + ball_size[2] * (i + 1))
            target_poses.append(target_pose)

            language_goal = self.lang_template.format(color=colors[i], target=targets[i])
            self.add_goal(objs=[ball_ids[i]], matches=np.ones((1, 1)), targ_poses=[target_pose], replace=False,
                          rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)