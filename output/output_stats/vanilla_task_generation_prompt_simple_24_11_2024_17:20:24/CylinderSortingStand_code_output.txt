import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class CylinderSortingStand(Task):
    """Sort cylinders of different colors by placing them onto the corresponding color-coded stands."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10
        self.lang_template = "place the {color} cylinder on the {color} stand"
        self.task_completed_desc = "done sorting cylinders."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define the number of cylinders and stands
        n_cylinders = 3
        n_stands = n_cylinders

        # Define the size of the cylinders and stands
        cylinder_size = (0.05, 0.05, 0.1)  # (radius, radius, height)
        stand_size = (0.07, 0.07, 0.02)    # (radius, radius, height)

        # Define the colors for the cylinders and stands
        colors = utils.get_distinct_colors(n_cylinders)

        # Add stands to the environment
        stand_urdf = 'stacking/stand.urdf'
        stand_poses = []
        for i in range(n_stands):
            # Get a random pose for the stand
            stand_pose = self.get_random_pose(env, stand_size)
            # Add the stand with the corresponding color
            env.add_object(stand_urdf, stand_pose, 'fixed', color=colors[i])
            stand_poses.append(stand_pose)

        # Add cylinders to the environment
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinders = []
        for i in range(n_cylinders):
            # Get a random pose for the cylinder
            cylinder_pose = self.get_random_pose(env, cylinder_size)
            # IMPORTANT: REPLACE THE TEMPLATE URDF with `fill_template`
            replace = {'COLOR': colors[i], 'SIZE': cylinder_size}
            urdf = self.fill_template(cylinder_urdf, replace)
            # Add the cylinder to the environment
            cylinder_id = env.add_object(urdf, cylinder_pose)
            cylinders.append(cylinder_id)

        # Define the goals for each cylinder
        for i, cylinder_id in enumerate(cylinders):
            # The goal is to place the cylinder on the stand with the matching color
            language_goal = self.lang_template.format(color=utils.COLOR_NAMES[colors[i]])
            self.add_goal(objs=[cylinder_id], 
                          matches=np.ones((1, 1)), 
                          targ_poses=[stand_poses[i]], 
                          replace=False,
                          rotations=True, 
                          metric='pose', 
                          params=None, 
                          step_max_reward=1, 
                          language_goal=language_goal)