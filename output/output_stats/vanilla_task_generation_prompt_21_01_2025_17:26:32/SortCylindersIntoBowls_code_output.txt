import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils
import pybullet as p

class SortCylindersIntoBowls(Task):
    """Pick up three red cylinders and two blue cylinders and place them into separate red and blue bowls."""

    def __init__(self):
        super().__init__()
        self.max_steps = 20  # Adjust as needed
        self.lang_template = "Place the red cylinders in the red bowl and the blue cylinders in the blue bowl."
        self.task_completed_desc = "Done sorting cylinders into bowls."
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Define object parameters
        cylinder_size = (0.05, 0.05, 0.1) # radius, radius, height
        bowl_size = (0.12, 0.12, 0.05) # approximate size of bowls

        # Add bowls
        bowl_urdf = 'bowl/bowl.urdf'
        red_bowl_pose = self.get_random_pose(env, bowl_size)
        blue_bowl_pose = self.get_random_pose(env, bowl_size)

        env.add_object(urdf=bowl_urdf, pose=red_bowl_pose, color=utils.COLORS['red'], category='fixed')
        env.add_object(urdf=bowl_urdf, pose=blue_bowl_pose, color=utils.COLORS['blue'], category='fixed')


        # Add cylinders
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        red_cylinders = []
        blue_cylinders = []

        for i in range(3):
            replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0], cylinder_size[1], cylinder_size[2]/2)}
            urdf = self.fill_template(cylinder_urdf, replace)
            pose = self.get_random_pose(env, cylinder_size)
            red_cylinders.append(env.add_object(urdf, pose, color=utils.COLORS['red']))

        for i in range(2):
            replace = {'DIM': cylinder_size, 'HALF': (cylinder_size[0], cylinder_size[1], cylinder_size[2]/2)}
            urdf = self.fill_template(cylinder_urdf, replace)
            pose = self.get_random_pose(env, cylinder_size)
            blue_cylinders.append(env.add_object(urdf, pose, color=utils.COLORS['blue']))


        # Define goals
        self.add_goal(objs=red_cylinders, matches=np.ones((len(red_cylinders), 1)), targ_poses=[red_bowl_pose], replace=False,
                       rotations=True, metric='pose', params=None, step_max_reward=0.5, language_goal="Place the red cylinders in the red bowl.")

        self.add_goal(objs=blue_cylinders, matches=np.ones((len(blue_cylinders), 1)), targ_poses=[blue_bowl_pose], replace=False,
                       rotations=True, metric='pose', params=None, step_max_reward=0.5, language_goal="Place the blue cylinders in the blue bowl.")