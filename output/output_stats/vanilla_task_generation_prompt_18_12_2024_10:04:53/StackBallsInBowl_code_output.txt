import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsInBowl(Task):
    """Pick up three differently colored balls (red, green, and blue) and stack them inside a yellow bowl."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set maximum steps for task completion
        self.lang_template = "stack the red, green, and blue balls in the yellow bowl"  # Language goal template
        self.task_completed_desc = "done stacking balls in bowl."  # Description of completed task
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Bowl
        # Color: Yellow
        # Size: Default bowl size
        # Category: Fixed (cannot be moved)
        bowl_size = (0.12, 0.12, 0)  # Default bowl size
        bowl_urdf = 'bowl/bowl.urdf'
        bowl_pose = self.get_random_pose(env, bowl_size)
        bowl_id = env.add_object(bowl_urdf, bowl_pose, 'fixed', color=utils.COLORS['yellow'])

        # Balls
        # Colors: Red, Green, Blue
        # Size: Default ball size
        # Category: Object (can be moved)
        ball_size = (0.04, 0.04, 0.04)  # Default ball size
        ball_urdf = 'ball/ball-template.urdf'
        ball_colors = ['red', 'green', 'blue']
        ball_ids = []
        ball_poses = []

        for color in ball_colors:
            ball_pose = self.get_random_pose(env, ball_size)
            ball_id = env.add_object(ball_urdf, ball_pose, color=utils.COLORS[color])
            ball_ids.append(ball_id)
            ball_poses.append(ball_pose)

        # Goal: stack balls in the bowl
        # matches: a 3x1 matrix indicating each ball should be in the bowl
        # targ_poses: the pose of the bowl (target location)
        # replace: False, as balls are not replaced after being placed
        # rotations: True, as ball orientation doesn't matter
        # metric: pose, as we want the balls to be inside the bowl with a certain pose tolerance
        # params: None, as no additional parameters are needed for the 'pose' metric
        # step_max_reward: 1, as there is only one goal
        self.add_goal(objs=ball_ids, matches=np.ones((3, 1)), targ_poses=[bowl_pose], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1, language_goal=self.lang_template)