import numpy as np
import os
import pybullet as p
import random
from cliport.tasks import primitives
from cliport.tasks.grippers import Spatula
from cliport.tasks.task import Task
from cliport.utils import utils
import numpy as np
from cliport.tasks.task import Task
from cliport.utils import utils

class StackBallsOnCylinder(Task):
    """Stack three different colored balls (red, green, and blue) on top of a vertically placed cylinder."""

    def __init__(self):
        super().__init__()
        self.max_steps = 10  # Set maximum steps for task completion
        self.lang_template = "stack the {color} ball on the cylinder"  # Language template for goal description
        self.task_completed_desc = "done stacking balls on cylinder."  # Description for task completion
        self.additional_reset()

    def reset(self, env):
        super().reset(env)

        # Cylinder:
        #   Color: Gray
        #   Size: (0.05, 0.05, 0.1) diameter and height
        #   Category: fixed
        cylinder_size = (0.05, 0.05, 0.1)  # Diameter and height
        cylinder_pose = self.get_random_pose(env, cylinder_size)
        cylinder_urdf = 'cylinder/cylinder-template.urdf'
        cylinder_id = env.add_object(cylinder_urdf, cylinder_pose, 'fixed')

        # Balls:
        #   Colors: Red, Green, Blue
        #   Size: (0.04, 0.04, 0.04) diameter
        #   Category: object
        ball_size = (0.04, 0.04, 0.04)
        ball_urdf = 'ball/ball-template.urdf'
        colors = [utils.COLORS['red'], utils.COLORS['green'], utils.COLORS['blue']]
        ball_ids = []

        for color in colors:
            ball_pose = self.get_random_pose(env, ball_size)
            ball_id = env.add_object(ball_urdf, ball_pose, color=color)
            ball_ids.append(ball_id)

        # Target poses for balls on the cylinder.
        target_poses = []
        z_offset = 0.1  # Initial offset on top of the cylinder
        for _ in range(3):
            target_pose = (cylinder_pose[0], cylinder_pose[1] + np.array([0, 0, z_offset]), cylinder_pose[2])
            target_poses.append(target_pose)
            z_offset += 0.04  # Increment z for each ball

        # Goal: stack the red ball.
        language_goal = self.lang_template.format(color="red")
        self.add_goal(objs=[ball_ids[0]], matches=np.ones((1, 1)), targ_poses=[target_poses[0]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Goal: stack the green ball.
        language_goal = self.lang_template.format(color="green")
        self.add_goal(objs=[ball_ids[1]], matches=np.ones((1, 1)), targ_poses=[target_poses[1]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)

        # Goal: stack the blue ball.
        language_goal = self.lang_template.format(color="blue")
        self.add_goal(objs=[ball_ids[2]], matches=np.ones((1, 1)), targ_poses=[target_poses[2]], replace=False,
                      rotations=True, metric='pose', params=None, step_max_reward=1/3, language_goal=language_goal)